// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: src/proto/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface GetApiHealthPayload {
}

export interface GetApiHealthResponse {
  service: string;
  version: string;
  timestamp: string;
  uptime: string;
}

function createBaseGetApiHealthPayload(): GetApiHealthPayload {
  return {};
}

export const GetApiHealthPayload: MessageFns<GetApiHealthPayload> = {
  encode(_: GetApiHealthPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiHealthPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiHealthPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetApiHealthResponse(): GetApiHealthResponse {
  return { service: "", version: "", timestamp: "", uptime: "" };
}

export const GetApiHealthResponse: MessageFns<GetApiHealthResponse> = {
  encode(message: GetApiHealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.timestamp !== "") {
      writer.uint32(26).string(message.timestamp);
    }
    if (message.uptime !== "") {
      writer.uint32(34).string(message.uptime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiHealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uptime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface DataGatewayServiceClient {
  getApiHealth(request: GetApiHealthPayload): Observable<GetApiHealthResponse>;
}

export interface DataGatewayServiceController {
  getApiHealth(
    request: GetApiHealthPayload,
  ): Promise<GetApiHealthResponse> | Observable<GetApiHealthResponse> | GetApiHealthResponse;
}

export function DataGatewayServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getApiHealth"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DataGatewayService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DataGatewayService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DATA_GATEWAY_SERVICE_NAME = "DataGatewayService";

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
